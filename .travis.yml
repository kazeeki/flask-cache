sudo: false
language: python
python:
  - 2.7
  - 3.5
  - 3.6
  - pypy
  - pypy3

cache:
  directories:
    - ~/.cache/pip

env:
  matrix:
    - OPTIONAL=true
    - OPTIONAL=false
  global:
    - PIP_WHEEL_DIR=$HOME/.cache/pip/wheels
    - PIP_FIND_LINKS=file://$HOME/.cache/pip/wheels
    - PYTHONHASHSEED=94967295
    - PYPY_GIT=https://github.com/yyuu/pyenv.git
    - PYENV_VENV_GIT=https://github.com/pyenv/pyenv-virtualenv.git
    - PYENV_ROOT=$HOME/.pyenv
    - PYPY_VENV=$HOME/virtualenvs
    - PYPY_PATH=$PYENV_ROOT/versions
    - PATH="$PYENV_ROOT/shims:${PATH}"
    - PATH="$PYENV_ROOT/bin:${PATH}"

notifications:
  email:
    on_success: always

branches:
  except:
    - /^v[0-9]/

before_install:
  - |
      if [ "$TRAVIS_PYTHON_VERSION" == "pypy" ]; then
        export PYPY_BUILD="pypy2.7-5.8.0"
        export PYPY_EXEC="pypy2-v5.8.0"
      elif [ "$TRAVIS_PYTHON_VERSION" == "pypy3" ]; then
        # https://github.com/pyenv/pyenv/tree/master/plugins/python-build/share/python-build
        export PYPY_BUILD="pypy3.5-5.8.0"
        export PYPY_EXEC="pypy3-v5.8.0"
      fi
  - |
      if [[ "$TRAVIS_PYTHON_VERSION" == "pypy"* ]]; then
        if [ -f "$PYENV_ROOT/bin/pyenv" ]; then
          pushd "$PYENV_ROOT" && git pull && popd
        else
          rm -rf "$PYENV_ROOT" && git clone --depth 1 "$PYPY_GIT" "$PYENV_ROOT"
        fi

        export PYENV_VERSION="$PYPY_BUILD"
        git clone "$PYENV_VENV_GIT" "$PYENV_ROOT"/plugins/pyenv-virtualenv
        eval "$(pyenv init -)"
        pyenv deactivate
        pyenv install --skip-existing "$PYENV_VERSION"
        pyenv global "$PYENV_VERSION"
        pyenv virtualenv "$PYENV_VERSION" "$PYPY_EXEC"
        pyenv activate "$PYPY_EXEC"
        python --version
        curl https://bootstrap.pypa.io/get-pip.py | python
        pip --version
      fi

install:
  - pip install -U pip
  - pip install wheel
  - pip install -r dev-requirements.txt
  - pip install -r requirements.txt
  - |
      if [[ "$OPTIONAL" == "true" ]]; then

        if [[ "$TRAVIS_PYTHON_VERSION" == "pypy"* ]]; then
          while read line; do
            if [[ $line != pylibmc* ]]; then
              pip wheel "$line"
              pip install "$line"
            fi
          done < optional-requirements.txt
        else
          pip wheel -r optional-requirements.txt
          pip install -r optional-requirements.txt
        fi
      fi

script:
  - manage lint && manage test --cover

services:
 - memcached
 - redis-server

after_success:
  - if [[ "$TRAVIS_PULL_REQUEST" == "true" ]]; then exit 0; fi
  - if [[ "$TRAVIS_BRANCH" != "master" ]]; then exit 0; fi
  - if [[ "$TRAVIS_PYTHON_VERSION" != "2.7" ]]; then exit 0; fi
